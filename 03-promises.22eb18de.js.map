{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,MAAM,GACtBC,EAAUH,EAAKI,SAASC,MACxBC,EAASN,EAAKI,SAASG,KACvBC,EAAWR,EAAKI,SAASK,OAE/BT,EAAKU,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAIC,iBACJ,IAAIC,EAAgBC,OAAOR,EAAOS,OAC9BC,EAAiBF,OAAOX,EAAQY,OAC9BE,EAAaH,OAAON,EAASO,OAC/BF,GAAiB,GAAKG,GAAkB,GAAKC,GAAc,EAC7DC,YAAW,WACT,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAYE,GAAK,EACnCC,QAAQC,IAAI,KAA2BC,OAAtBH,EAAE,sBAAmCG,OAAfN,EAAe,MAY9D,SAAuBG,EAAGN,GACxB,IAAMU,EAAQV,EACRW,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BX,YAAW,WACLM,EACFI,EAAQ,CAAET,EAAGA,EAAGN,cAAeA,IAE/BgB,EAAO,CAAEV,EAAGA,EAAGN,cAAeA,MAE/BU,MAKLO,CA1BoBX,EAAI,EAAGH,GA2BxBe,MAAK,SAAAC,G,IAAGb,EAACa,EAADb,EAAGN,EAAamB,EAAbnB,cACVoB,EAAAnC,GAASoC,OAAOC,QACd,uBAAiCb,OAARH,EAAE,QAAoBG,OAAdT,EAAc,UAGlDuB,OAAM,SAAAJ,G,IAAGb,EAACa,EAADb,EAAGN,EAAamB,EAAbnB,cACXoB,EAAAnC,GAASoC,OAAOG,QAAQ,sBAA8Bf,OAARH,EAAE,QAAoBG,OAAdT,EAAc,UAhClEG,GAAkCH,KAKtCoB,EAAAnC,GAASoC,OAAOG,QAAQ,4BAE1BrC,EAAKsC,W","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.forms[0];\nconst delayEl = form.elements.delay;\nconst stepEl = form.elements.step;\nconst amountEl = form.elements.amount;\n\nform.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(evt) {\n  evt.preventDefault();\n  let delayStepForm = Number(stepEl.value);\n  let firstDelayForm = Number(delayEl.value);\n  const amountForm = Number(amountEl.value);\n  if (delayStepForm >= 0 && firstDelayForm >= 0 && amountForm >= 0) {\n    setTimeout(() => {\n      for (let i = 0; i < amountForm; i += 1) {\n        console.log(`i ${i}, firstDelayForm: ${firstDelayForm} `);\n        updatePromise(i + 1, firstDelayForm);\n        firstDelayForm = firstDelayForm + delayStepForm;\n      }\n    }),\n      firstDelayForm;\n  } else {\n    Notiflix.Notify.failure('Please fill numbers > 0 ');\n  }\n  form.reset();\n}\n\nfunction createPromise(i, delayStepForm) {\n  const DELAY = delayStepForm;\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ i: i, delayStepForm: delayStepForm });\n      } else {\n        reject({ i: i, delayStepForm: delayStepForm });\n      }\n    }, DELAY);\n  });\n}\n\nfunction updatePromise(x, y) {\n  createPromise(x, y)\n    .then(({ i, delayStepForm }) => {\n      Notiflix.Notify.success(\n        `✅ Fulfilled promise ${i} in ${delayStepForm}ms`\n      );\n    })\n    .catch(({ i, delayStepForm }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${i} in ${delayStepForm}ms`);\n    });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$form","document","forms","$ce04d3a99e08e73b$var$delayEl","elements","delay","$ce04d3a99e08e73b$var$stepEl","step","$ce04d3a99e08e73b$var$amountEl","amount","addEventListener","evt","preventDefault","delayStepForm","Number","value","firstDelayForm","amountForm","setTimeout","i","console","log","concat","DELAY","shouldResolve","Math","random","Promise","resolve","reject","$ce04d3a99e08e73b$var$createPromise","then","param","$parcel$interopDefault","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.22eb18de.js.map"}