{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,MAAM,GACtBC,EAAUH,EAAKI,SAASC,MACxBC,EAASN,EAAKI,SAASG,KACvBC,EAAWR,EAAKI,SAASK,OAE/BT,EAAKU,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAIC,iBACJ,IAAIC,EAAgBC,OAAOR,EAAOS,OAC9BC,EAAiBF,OAAOX,EAAQY,OACpC,MAAME,EAAaH,OAAON,EAASO,OAC/BF,GAAiB,GAAKG,GAAkB,GAAKC,GAAc,EAC7DC,YAAW,KACT,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAYE,GAAK,EACnCC,QAAQC,IAAI,KAAKF,sBAAsBH,MAY/C,SAAuBG,EAAGN,GACxB,MAAMS,EAAQT,EACRU,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BV,YAAW,KACLK,EACFI,EAAQ,CAAER,EAAGA,EAAGN,cAAeA,IAE/Be,EAAO,CAAET,EAAGA,EAAGN,cAAeA,MAE/BS,MAKLO,CA1BoBV,EAAI,EAAGH,GA2BxBc,MAAK,EAACX,EAAEA,EAACN,cAAEA,MACVkB,EAAAjC,GAASkC,OAAOC,QACd,uBAAqBd,QAAUN,UAGlCqB,OAAM,EAACf,EAAEA,EAACN,cAAEA,MACXkB,EAAAjC,GAASkC,OAAOG,QAAQ,sBAAoBhB,QAAQN,UAhClDG,GAAkCH,KAKtCkB,EAAAjC,GAASkC,OAAOG,QAAQ,4BAE1BnC,EAAKoC","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.forms[0];\nconst delayEl = form.elements.delay;\nconst stepEl = form.elements.step;\nconst amountEl = form.elements.amount;\n\nform.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(evt) {\n  evt.preventDefault();\n  let delayStepForm = Number(stepEl.value);\n  let firstDelayForm = Number(delayEl.value);\n  const amountForm = Number(amountEl.value);\n  if (delayStepForm >= 0 && firstDelayForm >= 0 && amountForm >= 0) {\n    setTimeout(() => {\n      for (let i = 0; i < amountForm; i += 1) {\n        console.log(`i ${i}, firstDelayForm: ${firstDelayForm} `);\n        updatePromise(i + 1, firstDelayForm);\n        firstDelayForm = firstDelayForm + delayStepForm;\n      }\n    }),\n      firstDelayForm;\n  } else {\n    Notiflix.Notify.failure('Please fill numbers > 0 ');\n  }\n  form.reset();\n}\n\nfunction createPromise(i, delayStepForm) {\n  const DELAY = delayStepForm;\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ i: i, delayStepForm: delayStepForm });\n      } else {\n        reject({ i: i, delayStepForm: delayStepForm });\n      }\n    }, DELAY);\n  });\n}\n\nfunction updatePromise(x, y) {\n  createPromise(x, y)\n    .then(({ i, delayStepForm }) => {\n      Notiflix.Notify.success(\n        `✅ Fulfilled promise ${i} in ${delayStepForm}ms`\n      );\n    })\n    .catch(({ i, delayStepForm }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${i} in ${delayStepForm}ms`);\n    });\n}\n//\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$form","document","forms","$47d4ff9957288465$var$delayEl","elements","delay","$47d4ff9957288465$var$stepEl","step","$47d4ff9957288465$var$amountEl","amount","addEventListener","evt","preventDefault","delayStepForm","Number","value","firstDelayForm","amountForm","setTimeout","i","console","log","DELAY","shouldResolve","Math","random","Promise","resolve","reject","$47d4ff9957288465$var$createPromise","then","$parcel$interopDefault","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.000cf22a.js.map"}